from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import (
    MT5ConnectionSettings, 
    MT5ConnectionLog, 
    MT5ConnectionHealth, 
    MT5MonitoringSettings
)

# Register your models here.

@admin.register(MT5ConnectionSettings)
class MT5ConnectionSettingsAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ MT5"""
    
    list_display = [
        'status_icon', 'name', 'server', 'login', 
        'is_default', 'is_active', 'created_at'
    ]
    
    list_filter = [
        'is_active', 'is_default', 'server', 'created_at'
    ]
    
    search_fields = [
        'name', 'server', 'login'
    ]
    
    list_editable = [
        'is_active', 'is_default'
    ]
    
    readonly_fields = [
        'created_at', 'updated_at'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'notes')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞', {
            'fields': ('terminal_path', 'portable'),
            'classes': ('collapse',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', {
            'fields': ('server', 'login', 'password', 'timeout')
        }),
        ('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
            'fields': ('is_active', 'is_default')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    actions = ['make_default', 'activate_settings', 'deactivate_settings']
    
    def status_icon(self, obj):
        """–ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        if obj.is_active:
            icon = "üü¢"
            color = "green"
        else:
            icon = "üî¥"
            color = "red"
        
        default_mark = " üåü" if obj.is_default else ""
        
        return format_html(
            '<span style="color: {};">{}</span>{}',
            color, icon, default_mark
        )
    status_icon.short_description = "–°—Ç–∞—Ç—É—Å"
    
    def make_default(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if queryset.count() > 1:
            self.message_user(
                request, 
                "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É", 
                level='ERROR'
            )
            return
        
        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —É –≤—Å–µ—Ö
        MT5ConnectionSettings.objects.update(is_default=False)
        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        queryset.update(is_default=True, is_active=True)
        
        self.message_user(
            request, 
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{queryset.first().name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )
    make_default.short_description = "–°–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    
    def activate_settings(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        count = queryset.update(is_active=True)
        self.message_user(
            request, 
            f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {count}"
        )
    activate_settings.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    def deactivate_settings(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        count = queryset.update(is_active=False, is_default=False)
        self.message_user(
            request, 
            f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {count}"
        )
    deactivate_settings.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"


@admin.register(MT5ConnectionLog)
class MT5ConnectionLogAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ª–æ–≥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π MT5"""
    
    list_display = [
        'status_icon', 'settings', 'connection_time', 
        'success', 'short_error'
    ]
    
    list_filter = [
        'success', 'connection_time', 'settings'
    ]
    
    search_fields = [
        'settings__name', 'error_message'
    ]
    
    readonly_fields = [
        'settings', 'connection_time', 'success', 
        'error_message', 'account_info_formatted'
    ]
    
    fields = [
        'settings', 'connection_time', 'success',
        'error_message', 'account_info_formatted'
    ]
    
    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤—Ä—É—á–Ω—É—é"""
        return False
    
    def has_change_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        return False
    
    def status_icon(self, obj):
        """–ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if obj.success:
            return format_html('<span style="color: green;">‚úÖ</span>')
        else:
            return format_html('<span style="color: red;">‚ùå</span>')
    status_icon.short_description = "–°—Ç–∞—Ç—É—Å"
    
    def short_error(self, obj):
        """–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if obj.error_message:
            if len(obj.error_message) > 50:
                return obj.error_message[:50] + "..."
            return obj.error_message
        return "-"
    short_error.short_description = "–û—à–∏–±–∫–∞"
    
    def account_info_formatted(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ"""
        if obj.account_info:
            html = "<table style='border-collapse: collapse;'>"
            for key, value in obj.account_info.items():
                html += f"<tr><td style='border: 1px solid #ddd; padding: 4px;'><strong>{key}:</strong></td>"
                html += f"<td style='border: 1px solid #ddd; padding: 4px;'>{value}</td></tr>"
            html += "</table>"
            return mark_safe(html)
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    account_info_formatted.short_description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ"


@admin.register(MT5ConnectionHealth)
class MT5ConnectionHealthAdmin(admin.ModelAdmin):
    """Admin panel for MT5 connection health records"""
    
    list_display = [
        'status_icon', 'settings', 'check_time', 'ping_display', 
        'balance', 'equity', 'error_message_short'
    ]
    
    list_filter = [
        'is_connected', 'settings', 'check_time'
    ]
    
    search_fields = [
        'settings__name', 'error_message'
    ]
    
    readonly_fields = [
        'check_time', 'settings', 'is_connected', 'ping_ms',
        'balance', 'equity', 'margin', 'error_message'
    ]
    
    date_hierarchy = 'check_time'
    
    list_per_page = 50
    
    ordering = ['-check_time']
    
    def has_add_permission(self, request):
        """Health records are created automatically"""
        return False
    
    def has_change_permission(self, request, obj=None):
        """Health records are read-only"""
        return False
    
    def status_icon(self, obj):
        """Connection status icon"""
        if obj.is_connected:
            return format_html(
                '<span style="color: green; font-size: 16px;">‚úÖ</span>'
            )
        else:
            return format_html(
                '<span style="color: red; font-size: 16px;">‚ùå</span>'
            )
    status_icon.short_description = 'Status'
    
    def ping_display(self, obj):
        """Formatted ping display"""
        if obj.ping_ms is not None:
            if obj.ping_ms < 100:
                color = 'green'
            elif obj.ping_ms < 500:
                color = 'orange'
            else:
                color = 'red'
            return format_html(
                '<span style="color: {};">{} ms</span>',
                color, obj.ping_ms
            )
        return '-'
    ping_display.short_description = 'Ping'
    
    def error_message_short(self, obj):
        """Shortened error message"""
        if obj.error_message:
            return obj.error_message[:50] + '...' if len(obj.error_message) > 50 else obj.error_message
        return '-'
    error_message_short.short_description = 'Error'


@admin.register(MT5MonitoringSettings)
class MT5MonitoringSettingsAdmin(admin.ModelAdmin):
    """Admin panel for MT5 monitoring settings"""
    
    list_display = [
        'status_icon', 'monitoring_enabled', 'auto_reconnect_enabled',
        'health_check_interval', 'max_reconnect_attempts', 'updated_at'
    ]
    
    readonly_fields = [
        'created_at', 'updated_at'
    ]
    
    fieldsets = (
        ('Monitoring Control', {
            'fields': ('monitoring_enabled', 'auto_reconnect_enabled')
        }),
        ('Timing Settings', {
            'fields': (
                'health_check_interval', 'reconnect_interval', 
                'max_reconnect_attempts'
            )
        }),
        ('Alert Settings', {
            'fields': ('enable_email_alerts', 'alert_email'),
            'classes': ('collapse',)
        }),
        ('Data Retention', {
            'fields': ('health_records_retention_days',),
            'classes': ('collapse',)
        }),
        ('Metadata', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def has_add_permission(self, request):
        """Only allow one settings instance"""
        return not MT5MonitoringSettings.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        """Don't allow deletion of settings"""
        return False
    
    def status_icon(self, obj):
        """Monitoring status icon"""
        if obj.monitoring_enabled:
            return format_html(
                '<span style="color: green; font-size: 16px;">üü¢</span>'
            )
        else:
            return format_html(
                '<span style="color: red; font-size: 16px;">üî¥</span>'
            )
    status_icon.short_description = 'Status'


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admin.site.site_header = "Project GCE 3 - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
admin.site.site_title = "Project GCE 3"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MT5 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏"
