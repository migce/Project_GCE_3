from django.db import models
from django.core.exceptions import ValidationError

# Create your models here.

class MT5ConnectionSettings(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MetaTrader 5"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    name = models.CharField(
        max_length=100, 
        unique=True,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        help_text="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    terminal_path = models.CharField(
        max_length=500,
        verbose_name="–ü—É—Ç—å –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É MT5",
        help_text="–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É terminal64.exe",
        blank=True,
        null=True
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server = models.CharField(
        max_length=100,
        verbose_name="–°–µ—Ä–≤–µ—Ä",
        help_text="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: MetaQuotes-Demo)",
        blank=True
    )
    
    # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    login = models.BigIntegerField(
        verbose_name="–õ–æ–≥–∏–Ω",
        help_text="–ù–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞",
        null=True,
        blank=True
    )
    
    password = models.CharField(
        max_length=100,
        verbose_name="–ü–∞—Ä–æ–ª—å",
        help_text="–ü–∞—Ä–æ–ª—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞",
        blank=True
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    timeout = models.IntegerField(
        default=60000,
        verbose_name="–¢–∞–π–º–∞—É—Ç (–º—Å)",
        help_text="–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    portable = models.BooleanField(
        default=False,
        verbose_name="–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º",
        help_text="–ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    )
    
    # –°—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–Ω–æ",
        help_text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    )
    
    is_default = models.BooleanField(
        default=False,
        verbose_name="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        help_text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–°–æ–∑–¥–∞–Ω–æ"
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    notes = models.TextField(
        blank=True,
        verbose_name="–ó–∞–º–µ—Ç–∫–∏",
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
    )
    
    # –¢–æ—Ä–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    balance = models.DecimalField(
        max_digits=15,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name="–ë–∞–ª–∞–Ω—Å",
        help_text="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞"
    )
    
    equity = models.DecimalField(
        max_digits=15,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name="–≠–∫–≤–∏—Ç–∏",
        help_text="–¢–µ–∫—É—â–µ–µ —ç–∫–≤–∏—Ç–∏ —Å—á–µ—Ç–∞"
    )
    
    last_connection_time = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        help_text="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    )

    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MT5"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MT5"
        ordering = ['-is_default', '-is_active', 'name']

    def __str__(self):
        status = "üü¢" if self.is_active else "üî¥"
        default = " (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" if self.is_default else ""
        return f"{status} {self.name}{default}"

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        super().clean()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.is_default:
            existing_default = MT5ConnectionSettings.objects.filter(
                is_default=True
            ).exclude(pk=self.pk)
            
            if existing_default.exists():
                raise ValidationError(
                    "–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                )

    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ default"""
        if self.is_default:
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ default —É –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            MT5ConnectionSettings.objects.filter(
                is_default=True
            ).exclude(pk=self.pk).update(is_default=False)
        
        super().save(*args, **kwargs)

    @classmethod
    def get_default_settings(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            return cls.objects.filter(is_default=True, is_active=True).first()
        except cls.DoesNotExist:
            return None

    @classmethod
    def get_active_settings(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return cls.objects.filter(is_active=True)


class MT5ConnectionLog(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ MT5"""
    
    settings = models.ForeignKey(
        MT5ConnectionSettings,
        on_delete=models.CASCADE,
        verbose_name="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    )
    
    connection_time = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    )
    
    success = models.BooleanField(
        verbose_name="–£—Å–ø–µ—à–Ω–æ"
    )
    
    error_message = models.TextField(
        blank=True,
        verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
    )
    
    account_info = models.JSONField(
        null=True,
        blank=True,
        verbose_name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ"
    )

    class Meta:
        verbose_name = "–õ–æ–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MT5"
        verbose_name_plural = "–õ–æ–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π MT5"
        ordering = ['-connection_time']

    def __str__(self):
        status = "‚úÖ" if self.success else "‚ùå"
        return f"{status} {self.settings.name} - {self.connection_time.strftime('%d.%m.%Y %H:%M')}"


class MT5ConnectionHealth(models.Model):
    """Model for tracking MT5 connection health over time"""
    
    settings = models.ForeignKey(
        MT5ConnectionSettings,
        on_delete=models.CASCADE,
        verbose_name="Connection Settings",
        related_name="health_records"
    )
    
    check_time = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Check Time"
    )
    
    is_connected = models.BooleanField(
        verbose_name="Is Connected"
    )
    
    ping_ms = models.IntegerField(
        null=True,
        blank=True,
        verbose_name="Ping (ms)",
        help_text="Connection response time in milliseconds"
    )
    
    balance = models.DecimalField(
        max_digits=15,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name="Account Balance"
    )
    
    equity = models.DecimalField(
        max_digits=15,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name="Account Equity"
    )
    
    margin = models.DecimalField(
        max_digits=15,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name="Used Margin"
    )
    
    error_message = models.TextField(
        blank=True,
        verbose_name="Error Message"
    )
    
    class Meta:
        verbose_name = "MT5 Connection Health Record"
        verbose_name_plural = "MT5 Connection Health Records"
        ordering = ['-check_time']
        indexes = [
            models.Index(fields=['settings', '-check_time']),
            models.Index(fields=['is_connected', '-check_time']),
        ]
    
    def __str__(self):
        status = "üü¢" if self.is_connected else "üî¥"
        return f"{status} {self.settings.name} - {self.check_time.strftime('%H:%M:%S')}"


class MT5MonitoringSettings(models.Model):
    """Global settings for MT5 monitoring system"""
    
    # Monitoring intervals
    health_check_interval = models.IntegerField(
        default=30,
        verbose_name="Health Check Interval (seconds)",
        help_text="How often to check connection health"
    )
    
    reconnect_interval = models.IntegerField(
        default=60,
        verbose_name="Reconnect Interval (seconds)",
        help_text="How often to attempt reconnection when disconnected"
    )
    
    max_reconnect_attempts = models.IntegerField(
        default=5,
        verbose_name="Max Reconnect Attempts",
        help_text="Maximum number of consecutive reconnection attempts"
    )
    
    # Alerting settings
    enable_email_alerts = models.BooleanField(
        default=False,
        verbose_name="Enable Email Alerts"
    )
    
    alert_email = models.EmailField(
        blank=True,
        verbose_name="Alert Email Address"
    )
    
    # Data retention
    health_records_retention_days = models.IntegerField(
        default=30,
        verbose_name="Health Records Retention (days)",
        help_text="How long to keep health check records"
    )
    
    # Monitoring control
    monitoring_enabled = models.BooleanField(
        default=True,
        verbose_name="Enable Monitoring",
        help_text="Enable/disable the entire monitoring system"
    )
    
    auto_reconnect_enabled = models.BooleanField(
        default=True,
        verbose_name="Enable Auto-Reconnect",
        help_text="Automatically attempt to reconnect when connection is lost"
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Created"
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="Updated"
    )
    
    class Meta:
        verbose_name = "MT5 Monitoring Settings"
        verbose_name_plural = "MT5 Monitoring Settings"
    
    def __str__(self):
        status = "üü¢" if self.monitoring_enabled else "üî¥"
        return f"{status} MT5 Monitoring Settings"
    
    @classmethod
    def get_settings(cls):
        """Get or create monitoring settings"""
        settings, created = cls.objects.get_or_create(
            pk=1,
            defaults={
                'health_check_interval': 30,
                'reconnect_interval': 60,
                'max_reconnect_attempts': 5,
                'monitoring_enabled': True,
                'auto_reconnect_enabled': True,
            }
        )
        return settings


class TradingSystem(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º TradeStation"""
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
    system_sid = models.CharField(
        max_length=50,
        unique=True,
        verbose_name="System ID",
        help_text="–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: DOTBIN, TestSys)"
    )
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        help_text="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"
    )
    
    # –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞
    symbol = models.CharField(
        max_length=20,
        verbose_name="–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞",
        help_text="–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: EURUSD, GBPUSD)",
        default="EURUSD"
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    timeframes_count = models.PositiveIntegerField(
        verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤",
        help_text="–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞",
        default=1
    )
    
    # –°–¥–≤–∏–≥ –≤—Ä–µ–º–µ–Ω–∏
    time_offset_minutes = models.IntegerField(
        verbose_name="–°–¥–≤–∏–≥ –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã)",
        help_text="–°–¥–≤–∏–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)",
        default=0
    )
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–Ω–∞",
        help_text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    description = models.TextField(
        blank=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–°–æ–∑–¥–∞–Ω–æ"
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ"
    )
    
    class Meta:
        verbose_name = "–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"
        verbose_name_plural = "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã"
        ordering = ['system_sid']
    
    def __str__(self):
        return f"{self.system_sid} - {self.symbol} ({self.timeframes_count} TF)"
    
    def get_expected_files_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
        return self.timeframes_count
    
    def get_file_pattern(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
        return f"collector_{self.system_sid}_{self.symbol}_*.csv"


class TimeFrame(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    TIMEFRAME_CHOICES = [
        ('M1', '1 Minute'),
        ('M2', '2 Minutes'),
        ('M5', '5 Minutes'),
        ('M15', '15 Minutes'),
        ('M30', '30 Minutes'),
        ('H1', '1 Hour'),
        ('H4', '4 Hours'),
        ('D1', '1 Day'),
        ('W1', '1 Week'),
        ('MN1', '1 Month'),
    ]
    
    # –°–≤—è–∑—å —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    trading_system = models.ForeignKey(
        TradingSystem,
        on_delete=models.CASCADE,
        related_name='timeframes',
        verbose_name="–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"
    )
    
    # –¢–∞–π–º—Ñ—Ä–µ–π–º
    timeframe = models.CharField(
        max_length=10,
        choices=TIMEFRAME_CHOICES,
        verbose_name="–¢–∞–π–º—Ñ—Ä–µ–π–º"
    )
    
    # –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    level = models.PositiveIntegerField(
        verbose_name="–£—Ä–æ–≤–µ–Ω—å",
        help_text="–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π)"
    )
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω"
    )
    
    class Meta:
        verbose_name = "–¢–∞–π–º—Ñ—Ä–µ–π–º"
        verbose_name_plural = "–¢–∞–π–º—Ñ—Ä–µ–π–º—ã"
        unique_together = ['trading_system', 'timeframe']
        ordering = ['trading_system', 'level']
    
    def __str__(self):
        return f"{self.trading_system.system_sid} - {self.timeframe} (L{self.level})"
    
    def get_filename_pattern(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        return f"collector_{self.trading_system.system_sid}_{self.trading_system.symbol}_{self.timeframe}.csv"


class DataFile(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    
    STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'),
        ('processing', '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è'),
        ('completed', '–û–±—Ä–∞–±–æ—Ç–∞–Ω'),
        ('error', '–û—à–∏–±–∫–∞'),
        ('skipped', '–ü—Ä–æ–ø—É—â–µ–Ω'),
    ]
    
    # –°–≤—è–∑—å —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    trading_system = models.ForeignKey(
        TradingSystem,
        on_delete=models.CASCADE,
        related_name='data_files',
        verbose_name="–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"
    )
    
    # –°–≤—è–∑—å —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º
    timeframe = models.ForeignKey(
        TimeFrame,
        on_delete=models.CASCADE,
        related_name='data_files',
        verbose_name="–¢–∞–π–º—Ñ—Ä–µ–π–º",
        null=True,
        blank=True
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    filename = models.CharField(
        max_length=255,
        verbose_name="–ò–º—è —Ñ–∞–π–ª–∞"
    )
    
    file_path = models.CharField(
        max_length=500,
        verbose_name="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"
    )
    
    file_size = models.PositiveIntegerField(
        verbose_name="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–∞–π—Ç)",
        null=True,
        blank=True
    )
    
    file_modified = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞",
        null=True,
        blank=True
    )
    
    # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='pending',
        verbose_name="–°—Ç–∞—Ç—É—Å"
    )
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    rows_processed = models.PositiveIntegerField(
        verbose_name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫",
        null=True,
        blank=True
    )
    
    error_message = models.TextField(
        blank=True,
        verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
    )
    
    # JSON –¥–∞–Ω–Ω—ã–µ
    json_data = models.JSONField(
        null=True,
        blank=True,
        verbose_name="JSON –¥–∞–Ω–Ω—ã–µ",
        help_text="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–°–æ–∑–¥–∞–Ω–æ"
    )
    
    processed_at = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    )
    
    class Meta:
        verbose_name = "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö"
        verbose_name_plural = "–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö"
        unique_together = ['trading_system', 'filename']
        ordering = ['-file_modified', 'filename']
    
    def __str__(self):
        return f"{self.trading_system.system_sid} - {self.filename} ({self.status})"
